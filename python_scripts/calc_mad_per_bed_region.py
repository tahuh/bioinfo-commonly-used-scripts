#!/usr/bin/python

from __future__ import print_function
import argparse
import numpy as np

parser = argparse.ArgumentParser()

parser.add_argument("-d", "--depth", type=str, required=True, help="Depth file generated by samtools depth")
parser.add_argument("-b", "--bed", type=str, required=True, help="BED file used for hyb capture. Zero-based")
parser.add_argument("-o", "--outfile", type=str, required=True, help="BED5 format output")

args = parser.parse_args()

print("Loading BED region into memory")

bed = {}
pos2region = {}
region_info={}
nregion = 0
with open(args.bed) as bedfile:
	for i, line in enumerate(bedfile):
		data = line.rstrip().split("\t")
		if len(data) == 3:
			gene_name = "Region%d"%(i+1)
		else:
			gene_name = data[4]
		chrom,start,end=data[0],int(data[1]),int(data[2])
		try:
			bed[chrom]
			pos2region[chrom]
		except KeyError:
			bed[chrom] = {}
			pos2region[chrom] = {}
		region_info[i] = {"chr" : chrom, "start": str(start), "end" : str(end), "name": gene_name}
		for j in range(start+1, end+1):
			bed[chrom][j] = 0
			pos2region[chrom][j] = i
		nregion += 1
total_distribution = []
print("Loading depth information....")
with open(args.depth) as depthfile:
	for line in depthfile:
		data = line.rstrip().split("\t")
		chrom,pos,depth=data[0],int(data[1]),int(data[2])
		try:
			bed[chrom][pos] += depth
			total_distribution.append(depth)
		except KeyError:
			continue
outfile = open(args.outfile, "w")
global_median = np.median(total_distribution)
print("Calculate...")
for region_index in range(1,nregion+1):
	region_name = region_info[i]["name"]
	region_start = int(region_info[i]["start"]) + 1
	region_end = int(region_info[i]["end"]) + 1
	region_chrom = region_info[i]["chr"]
	depths = []
	for pos , depth in bed[region_chrom].items():
		if pos >= region_start and pos < region_end:
			depths.append(depth)
	mad = np.median( np.abs(np.array(depths) - global_median) )
	outfile.write(region_chrom + '\t' + str(region_start) + '\t' + str(region_end) + '\t' + region_name + '\t' + str(mad) + '\n')
